using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using System.Web;

/// <summary>
/// {{_info.title}}
/// </summary>
{{#if info.description}}{{docComment info.description}}{{/if}}
{{#if info.version}}/// <version>{{info.version}}</version>{{/if}}
{{>namespace}} {
    
    public class ApiClient{{_tag.name}}  : IApiClient{{_tag.name}}
    {
        private const string ContentType = "application/json";
        private readonly string _baseAddress;
        private readonly HttpClient _client;

        public ApiClient{{_tag.name}}(HttpClient httpClient, Configuration config) 
        {
          _client = httpClient;
          _baseAddress = config.GetBaseAddress();
        }

        {{#each paths}}
        {{~setVar "path" @key}}
        {{~#each this}}
        {{~#ifEquals ../../_tag.name _tag.name}}
        {{~#if (pathContentTypeSupported this)}}

        {{#if summary}}
        /// <summary>
        /// {{summary}}
        /// </summary>
        {{/if}}
        {{#if description}}
        /// {{description}}
        {{/if}}
        {{#if tags}}
        /// <tags>{{tags}}</tags>
        {{/if}}
        {{#each _sortedParameters}}
        /// <param name="{{name}}">{{description}}</param>
        {{/each}}
        public async Task<HttpResponse<{{#if _response.schema}}{{safeTypeConvert _response.schema}}{{else}}object{{/if}}>> {{operationId}}(
          {{~#each _sortedParameters ~}}
            {{~nullableTypeConvert schema _optional}} {{toParamName name ~}}
            {{~#if (hasDefault schema.default)}} = {{{quoteIfString schema.default}}}{{/if ~}}
            {{~#unless @last}}, {{/unless ~}}
          {{~/each ~}}
        )
        {
            {{createQueryStringSnippet _sortedParameters}}
            var requestUri = $"{_baseAddress}{{setPathParameters @root.path _sortedParameters}}{{#if (queryParametersExist _sortedParameters)}}{queryString}{{/if}}";
            var request = new HttpRequestMessage(new HttpMethod("{{@key}}"), requestUri) 
            {{~#if (bodyParameterExists _sortedParameters) ~}}
            {
                Content = new StringContent(JsonSerializer.Serialize(body), Encoding.UTF8, ContentType)
            };
            {{~else~}}
            { }; 
            {{~/if~}}
            {{createHeaderParamsSnippet _sortedParameters}}
            var response = await _client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            {{#if _response.schema}}
            var responseBody = await response.Content.ReadAsStringAsync();
            return new HttpResponse<{{safeTypeConvert _response.schema}}>() {
              Data = {{createReturnStatement _response.schema}}
            };
            {{else}}
            return new HttpResponse<object>() { };
            {{/if}}
        }
        {{else}}
        public Task{{#if _response.schema}}<HttpResponse<{{safeTypeConvert _response.schema}}>>{{/if}} {{operationId}}({{#each _sortedParameters}}{{nullableTypeConvert schema _optional}} {{name}}{{#if schema.default}} = {{{quoteIfString schema.default}}}{{/if}}{{#unless @last}}, {{/unless}}{{/each}})
        {
            throw new NotImplementedException("Operation '{{operationId}}' most likely does not support json encoded requests which are not supported by openapi forge.");
        }        
        {{/if}}
        {{/ifEquals}}
        {{/each}}  
        {{/each}}
    }
}
